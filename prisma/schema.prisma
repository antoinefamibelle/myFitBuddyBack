generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://antoinefamibelle:TwfhjWv8IFc0@ep-divine-bush-a2b7sbla.eu-central-1.aws.neon.tech/exercices?sslmode=require"
}

model Exercice {
  id           String   @id @default(uuid())
  type         String?
  name         String   @unique
  equipment    String?
  instructions String?
  difficulty   String?
  muscleGroup  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  userId       String?
  workoutId    String?
  User         User?    @relation(fields: [userId], references: [id])
  Workout      Workout? @relation(fields: [workoutId], references: [id])
}

model User {
  id            String     @id @default(uuid())
  email         String     @unique
  password      String
  firstName     String
  lastName      String
  role          String
  height   Int?
  weight   Int?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  profilPicture String?
  username      String?    @unique
  favorites     Exercice[]
  favoritesWithImage ExerciceWithImage[]
  workouts      Workout[]
}

model Workout {
  id          String     @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  createdById String?
  duration    Int?
  difficulty  String?
  userId      String?
  exercices   Exercice[]
  user        User?      @relation(fields: [userId], references: [id])
  ExerciceWithImage ExerciceWithImage[]
}

model ExerciceWithImage {
  id           String   @id @default(uuid())
  bodyPart     String?
  equipment    String?
  image        String?
  name         String   @unique
  target       String?
  secondaryMuscle String[]
  instructions String[]
  userId       String?
  workoutId    String?
  User         User?    @relation(fields: [userId], references: [id])
  Workout      Workout? @relation(fields: [workoutId], references: [id])
}